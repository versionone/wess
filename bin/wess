#!/usr/bin/env node

var fs = require('fs');
var wess = require('../lib/wess');

// Define command line options.
var argv = require('yargs')
  .usage('Usage: $0 [-w] [-x] [-m] [-p] -i input -o output')
  .describe('i', 'input file')
  .alias('i', 'input')
  .describe('o', 'output file')
  .alias('o', 'output')
  .describe('w', 'watch and recompile on changes')
  .alias('w', 'watch')
  .describe('x', 'compress output')
  .alias('x', 'compress')
  .describe('m', 'generate inline source map')
  .alias('m', 'sourcemap')
  .describe('v', 'show verbose output')
  .alias('v', 'verbose')
  .requiresArg(['i', 'o'])
  .required(['i', 'o'])
  .argv;

var stderr = process.stderr;

var input = argv.input;
var output = argv.output;
var watch = argv.watch;
var compress = argv.compress;
var sourcemap = argv.sourcemap;
var verbose = argv.verbose;

var lessOpts = {};

// Compress output?
if (compress) {
  lessOpts.compress = true;
}

// Generate inline source map?
if (sourcemap) {
  lessOpts.sourceMap = { sourceMapFileInline: true };
}

if (watch) {
  // Watch mode. Keep watching for changes and recompile when they occur.
  var watcher = wess(input, lessOpts);
  watcher.on('change', change);
  watcher.on('compile', success);
  watcher.on('error', error);
} else {
  // Single-shot mode. Compile once and return status.
  var watcher = wess(input, lessOpts);
  watcher.on('compile', function(result) {
    success(result);
    watcher.close();
    process.exit(0);
  });
  watcher.on('error', function(err) {
    error(err);
    watcher.close();
    process.exit(1);
  });
}

function change(path) {
  if (verbose) {
    stderr.write('Change detected in file: ' + path + '\n');
  }
}

// Error handler.
function error(err) {
  if (err.filename && err.line) {
    // Report parse error.
    stderr.write(err.filename + ':' + err.line + ': ' + err.message + '\n');
  } else {
    // Report other errors.
    stderr.write(err.toString() + '\n');
  }
}

// Success handler.
function success(result) {
  try {
    fs.writeFileSync(output, result.css);
    // Report successful compilation.
    if (verbose) {
      var len = result.css.length;
      stderr.write('Compiled ' + output + ', ' + len + ' bytes\n');
    }
  } catch (err) {
    // Report write error.
    stderr.write(err.toString() + '\n');
  }
}
